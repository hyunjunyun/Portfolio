import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

public class ProductForm extends BaseFrame{
	String userName;
	String str[] = {"전체","채소","과일","정육","해산물","가공식품","유제품","생활용품","주방용품"}, str2[] = {"이름 : ","최대 가격 : ","최저 가격 : "};
	String dtmstr[] = {"상품번호","상품 카테고리","상품 이름","상품 가격","상품 재고","상품 설명"};
	DefaultTableModel dtm = new DefaultTableModel();
	JTable jt = new JTable();
	JScrollPane jsc = new JScrollPane();
	String category = "", name = "";
	int maximumPrice = 100000000, minimumPrice = 0;
	JLabel categoryLable[] = new JLabel[9];
	public ProductForm(String userName) {
		super(1000, 700, "상품목록", new BorderLayout(), 2);
		this.userName = userName;
		setVisible(true);
		setDesign();
		setAction();
		
	}

	private void setAction() {
		for (int i = 0; i < 3; i++) {
			jb[i].addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent e) {
					if(e.getSource().equals(jb[0])) {
						dispose();
						new BestProduct();
					}
					if(e.getSource().equals(jb[1])) {
						dispose();
						new PayList();
					}
					if(e.getSource().equals(jb[2])) {
						int max = 0,min = 0;
						name = jtf[0].getText();
						if(jtf[1].getText().equals("")) 
							max = 1000000;
						else
							max = chageIntger(jtf[1].getText());
						if(jtf[2].getText().equals("")) 
							min = 0;
						else 
							min = chageIntger(jtf[2].getText());
						
						if(max < min) {
							errorMessage("최소 가격은 최대 가격보다 낮아야 합니다.");
							return;
						}
						maximumPrice = max;
						minimumPrice = min;
						
						centerDesign();
					}
					
				}
			});
			
		}
		for (int i = 0; i < 9; i++) {
			categoryLable[i].addMouseListener(new MouseAdapter() {
				@Override
				public void mouseEntered(MouseEvent e) {
					JLabel lable = (JLabel) e.getSource();
					lable.setForeground(Color.blue);
				}
				@Override
				public void mouseExited(MouseEvent e) {
					JLabel lable = (JLabel) e.getSource();
					lable.setForeground(Color.black);
					if(lable.getText().equals(category))
						lable.setForeground(Color.red);
				}
				@Override
				public void mouseClicked(MouseEvent e) {
					if(e.getClickCount() == 2) {
						for (int j = 0; j < 9; j++) {
							categoryLable[j].setForeground(Color.black);
						}
						JLabel lable = (JLabel) e.getSource();
						lable.setForeground(Color.red);
						category = lable.getText();
					}
				}
			});
		}
		jt.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if(e.getClickCount() == 2) {
					dispose();
					Object obj[] = new Object[6];
					for (int i = 0; i < 6; i++) {
						obj[i] = dtm.getValueAt(jt.getSelectedRow(), i);
					}
					new Pay(obj);
				}
			}
		});
	}

	private void setDesign() {
		add(jp[0] = new JPanel(new FlowLayout(FlowLayout.LEFT)),BorderLayout.NORTH);
		add(jp[1] = new JPanel(new BorderLayout()),BorderLayout.CENTER);
		add(jp[2] = new JPanel(new BorderLayout()),BorderLayout.WEST);
		jp[0].setPreferredSize(new Dimension(0, 50));
		jp[2].setPreferredSize(new Dimension(300, 0));
		jp[0].add(jl[0] = new JLabel("유저 : " + userName));
		jl[0].setFont(new Font("맑은고딕",Font.BOLD,20));
		centerDesign();
		leftDesign();
	}
	private void leftDesign() {
		JPanel detailJp[] = new JPanel[3];
		jp[2].add(detailJp[0] = new JPanel(new GridLayout(0, 1)),BorderLayout.WEST);
		jp[2].add(detailJp[1] = new JPanel(new FlowLayout(FlowLayout.RIGHT)),BorderLayout.CENTER);
		jp[2].add(detailJp[2] = new JPanel(),BorderLayout.SOUTH);
		detailJp[0].add(jl[1] = new JLabel("카테고리"));
		jl[1].setFont(new Font("", Font.BOLD, 20));
		for (int i = 0; i < 9; i++) {
			detailJp[0].add(categoryLable[i] = new JLabel(str[i]));
			categoryLable[i].setFont(new Font("", Font.BOLD, 15));
		}
		detailJp[2].add(jb[0] = new JButton("인기상품"));
		detailJp[2].add(jb[1] = new JButton("구매목록"));
		for (int i = 0; i < 3; i++) {
			detailJp[1].add(jl[2] = new JLabel(str2[i]));
			jl[2].setPreferredSize(new Dimension(80, 30));
			detailJp[1].add(jtf[i] = new JTextField(10));
		}
		detailJp[1].add(jb[2] = new JButton("검색"));
		jb[2].setPreferredSize(new Dimension(200, 40));
	}

	private void centerDesign() {
		JPanel detailJp[] = new JPanel[2];
		jp[1].removeAll();
		jp[1].add(detailJp[0] = new JPanel(new GridLayout(0, 3)));
		jp[1].add(detailJp[1] = new JPanel(new GridLayout(0, 1)),BorderLayout.SOUTH);
		detailJp[1].add(jsc = new JScrollPane(jt = new JTable(dtm = new DefaultTableModel(null,dtmstr) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		})));
		jt.getTableHeader().setReorderingAllowed(false);
		jt.getTableHeader().setResizingAllowed(false);
		TableColumnModel colmodel = jt.getColumnModel();
		colmodel.getColumn(5).setPreferredWidth(150);
		detailJp[1].setPreferredSize(new Dimension(0, 125));
		String sql = "select * from product where p_price >= " + minimumPrice + " and p_price <= " + maximumPrice;
		if(!(category.equals("") || category.equals("전체"))) {
			sql = sql + " and  p_category = '" + category + "'";
		}
		if(!name.equals("")) {
			sql = sql + " and p_name like '%" + name + "%'";
		}
		sql = sql + " limit 6";
		try {
			ResultSet rs = DB.stmt.executeQuery(sql);
			while(rs.next()) {
				JPanel addjp = new JPanel(new BorderLayout());
				JLabel imageJl;
				addjp.add(imageJl = new JLabel(new ImageIcon(addImage(".//지급자료/이미지폴더/"+rs.getString(3)+".jpg", 240, 220))),BorderLayout.CENTER);
				addjp.add(new JLabel(rs.getString(3),JLabel.CENTER),BorderLayout.SOUTH);
				addjp.setBorder(new LineBorder(Color.black));
				detailJp[0].add(addjp);
				Object obj[] = new Object[6];
				obj[0] = rs.getString(1);
				obj[1] = rs.getString(2);
				obj[2] = rs.getString(3);
				obj[3] = rs.getString(4);
				obj[4] = rs.getString(5);
				obj[5] = rs.getString(6);
				dtm.addRow(obj);
				addjp.addMouseListener(new MouseAdapter() {
					@Override
					public void mouseReleased(MouseEvent e) {
						dispose();
						new Pay(obj);		
					}
				});
				
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		repaint();
		revalidate();
	}

}
